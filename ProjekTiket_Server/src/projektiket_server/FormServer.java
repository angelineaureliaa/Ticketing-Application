/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projektiket_server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.List;


/**
 *
 * @author User
 */
public class FormServer extends javax.swing.JFrame implements Runnable {

    String chatClient, chatServer;
    ServerSocket s;
    Thread t;
    ArrayList<HandleSocket> clients = new ArrayList<>();
    String hello = "";

    @Override
    public void run() {
        try {
            while (true) {
                Socket incoming = s.accept();
                HandleSocket hs = new HandleSocket(this, incoming);
                hs.start();
                clients.add(hs);
                System.out.println("Client connected " + incoming.getRemoteSocketAddress());
            }
        } catch (Exception x) {
            Logger.getLogger((FormServer.class.getName())).log(Level.SEVERE, null, x);
        }
    }

    public FormServer() {
        initComponents();
        try {
            s = new ServerSocket(6002);
            System.out.println("Server started on port 6002");

            if (t == null) {
                t = new Thread(this, "Server");
                t.start();
            }
        } catch (IOException ex) {
            System.out.println("Error di constructor " + ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormServer().setVisible(true);
            }
        });
    }
    
    public void showChat(String tmp) {
        String textKirim = "";
        String[] arrayDariClient = tmp.split("-n");
        String perintah = arrayDariClient[0];
        System.out.println(perintah);

        if (perintah.equals("Login")) {
            String username = arrayDariClient[1];
            String pass = arrayDariClient[2];

            String cek = login(username, pass);
            if (cek.equals("SUCCESS!")) {
                List<String> hasilLogin = bacaDataLogin(username, pass);
                System.out.println("Hasil login" + hasilLogin.size());
                
                if (!hasilLogin.isEmpty()) {
                    textKirim = "Berhasil Login";
                    System.out.println("Login " + username);
                } else {
                    System.out.println("Login gagal atau data tidak ditemukan.");
                }
            } 
            else {
                textKirim = "Gagal Login";
            }
        } 
        else if (perintah.equals("Register")) {
            String username = arrayDariClient[1];
            String pass = arrayDariClient[2];
            String nama = arrayDariClient[3];
            
            String cekUsername = cekUsername(username, pass, nama);
            if (cekUsername.equals("LANJUT")) {
                String cek = register(username, pass, nama);
                if (cek.equals("TRUE")) {
                    textKirim = "Berhasil Register-n" + nama;
                    System.out.println("Register " + username);
                } else {
                    textKirim = "Gagal Register";
                }
            } else {
                textKirim = "Username dobel";
            }
            
        } 
        else if (perintah.equals("Lihat Daftar Acara")) {
            List<Object> hasil = bacaDataTabel("");
            System.out.println(hasil);
            if (!hasil.isEmpty()) {
                String text = "";
                for (Object data : hasil) {
                    text += data;
                }
                textKirim = "Daftar Acara-n" + text;
                System.out.println(textKirim);
            } else {
                textKirim = "Gagal Daftar Acara";
                System.out.println(textKirim);
            }
        }
        else if (perintah.equals("Pesan Acara")){
            String param = arrayDariClient[1];
            String[] paramSplit = param.split("-m");
            String usn = paramSplit[0];
            String idAcr = paramSplit[1];
            String hasil = pesanAcara(usn, idAcr);
            
            if(hasil.equals("True")){
                textKirim = "Berhasil Reservasi Acara";
            }
            else {
                 textKirim = "Reservasi gagal";  
            }
        }
        else if (perintah.equals("Daftar Acara Pending")) {
            String username = arrayDariClient[1];
            List<Object> hasil = bacaDataPending(username);
            
            System.out.println(hasil);
            if (!hasil.isEmpty()) {
                String text = "";
                for (Object data : hasil) {
                    text += data;
                }
                textKirim = "Daftar Acara Pending-n" + text;
                System.out.println(textKirim);
            } else {
                textKirim = "Gagal Daftar Acara Pending";
                System.out.println(textKirim);
            }
        }
        else if (perintah.equals("Claim Ticket Acara")){
            String param = arrayDariClient[1];
            String[] paramSplit = param.split("-m");
            String usn = paramSplit[0];
            String idRacr = paramSplit[1];
            String idAcr = paramSplit[2];
            String hasil = claimTicketAcara(usn, idRacr, idAcr);
            
            if(hasil.equals("True")){
                textKirim = "Berhasil Claim Ticket Acara";
            }
            else {
                 textKirim="Claim Ticket Acara gagal";  
            }
        }
        else if (perintah.equals("Lihat Daftar Tempat")) {
            List<Object> hasil = bacaDataTempat("");
            System.out.println(hasil);
            if (!hasil.isEmpty()) {
                String text = "";
                for (Object data : hasil) {
                    text += data;
                    System.out.println(text);
                }
                textKirim = "Daftar Tempat-n" + text;
                System.out.println(textKirim);
            } else {
                textKirim = "Gagal Daftar Tempat";
                System.out.println(textKirim);
            }
        } 
        else if (perintah.startsWith("Lihat Reservasi")) {
            String[] parts = arrayDariClient[1].split("-m");
            System.out.println("Isi parts" + parts[0]);
            if (parts.length == 3) {
                String tempatDipilih = parts[0];
                String lantaiDipilih = parts[1];
                String tanggalDipilih = parts[2];
                List<String> hasil = bacaReservasi(tempatDipilih, lantaiDipilih, tanggalDipilih);
                System.out.println(hasil);

                if (!hasil.isEmpty()) {
                    String text = "";
                    for (String data : hasil) {
                        text += data + "-m";
                        System.out.println(text);
                    }
                    textKirim = "Daftar-n" + text;
                    System.out.println(textKirim);
                } else {
                    textKirim = "Gagal Lihat Reservasi";
                    System.out.println(textKirim);
                }
            }
        }
        else if (perintah.equals("Pesan Parkir")) {
            List<Object> hasil = bacaDataTempat("");
            System.out.println(hasil);
            if (!hasil.isEmpty()) {

                String text = "";
                for (Object data : hasil) {
                    text += data;
                }
                System.out.println("masuk ke pesan parkir");
                String param = arrayDariClient[1];
                String[] paramSplit = param.split("-m");
                System.out.println(paramSplit.length);
                String nomor_parkir = paramSplit[0];
                String tanggal_pembelian = paramSplit[1];
                //SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                //Date tanggal_parkir = null;
                //Date tanggal_
                //tanggal_parkir = dateFormat.parse(paramSplit[3]);
                String tanggal_parkir = paramSplit[2];
                String lantai = paramSplit[3];
                String usn = paramSplit[4];
                String tempat = paramSplit[5];

                String cek = pesanParkir(nomor_parkir, tanggal_pembelian, tanggal_parkir, lantai, usn, tempat);
                if (cek.equals("TRUE")) {
                    textKirim = "Berhasil Reservasi Parkir-n" + nomor_parkir + "-nTanggal " + tanggal_parkir;
                    System.out.println("Pesan Parkir True");
                } 
                else if(cek.equals("Sudah terdaftar")){
                    textKirim="Sudah dipesan";
                }
                else {
                    textKirim = "Gagal Reservasi Parkir";
                }
            }
        }
        System.out.println(textKirim);
        broadcastChat(textKirim);
        System.out.println("BERHASIL KIRIM");
    }
    
    public void broadcastChat(String tmp) {
        for (HandleSocket client : clients) {
            client.sendChat(tmp);
        }
    }

    private static String register(java.lang.String username, java.lang.String password, java.lang.String nama) {
        projektiket_server.TicketWebService_Service service = new projektiket_server.TicketWebService_Service();
        projektiket_server.TicketWebService port = service.getTicketWebServicePort();
        return port.register(username, password, nama);
    }

    private static java.util.List<java.lang.String> bacaDataLogin(java.lang.String username, java.lang.String password) {
        projektiket_server.TicketWebService_Service service = new projektiket_server.TicketWebService_Service();
        projektiket_server.TicketWebService port = service.getTicketWebServicePort();
        return port.bacaDataLogin(username, password);
    }

    private static String login(java.lang.String username, java.lang.String password) {
        projektiket_server.TicketWebService_Service service = new projektiket_server.TicketWebService_Service();
        projektiket_server.TicketWebService port = service.getTicketWebServicePort();
        return port.login(username, password);
    }

    private static java.util.List<java.lang.Object> bacaDataTabel(java.lang.String username) {
        projektiket_server.TicketWebService_Service service = new projektiket_server.TicketWebService_Service();
        projektiket_server.TicketWebService port = service.getTicketWebServicePort();
        return port.bacaDataTabel(username);
    }

    private static String pesanAcara(java.lang.String username, java.lang.String idAcara) {
        projektiket_server.TicketWebService_Service service = new projektiket_server.TicketWebService_Service();
        projektiket_server.TicketWebService port = service.getTicketWebServicePort();
        return port.pesanAcara(username, idAcara);
    }

    private static java.util.List<java.lang.Object> bacaDataPending(java.lang.String username) {
        projektiket_server.TicketWebService_Service service = new projektiket_server.TicketWebService_Service();
        projektiket_server.TicketWebService port = service.getTicketWebServicePort();
        return port.bacaDataPending(username);
    }

    private static String claimTicketAcara(java.lang.String username, java.lang.String idRacr, java.lang.String idAcara) {
        projektiket_server.TicketWebService_Service service = new projektiket_server.TicketWebService_Service();
        projektiket_server.TicketWebService port = service.getTicketWebServicePort();
        return port.claimTicketAcara(username, idRacr, idAcara);
    }

    private static java.util.List<java.lang.Object> bacaDataTempat(java.lang.String hello) {
        projektiket_server.TicketWebService_Service service = new projektiket_server.TicketWebService_Service();
        projektiket_server.TicketWebService port = service.getTicketWebServicePort();
        return port.bacaDataTempat(hello);
    }

    private static java.util.List<java.lang.String> bacaReservasi(java.lang.String tempat, java.lang.String lantai, java.lang.String tanggal) {
        projektiket_server.TicketWebService_Service service = new projektiket_server.TicketWebService_Service();
        projektiket_server.TicketWebService port = service.getTicketWebServicePort();
        return port.bacaReservasi(tempat, lantai, tanggal);
    }

    private static String pesanParkir(java.lang.String nomorParkir, java.lang.String tanggalPembelian, java.lang.String tanggalParkir , java.lang.String lantai, java.lang.String username, java.lang.String tempatt) {
        projektiket_server.TicketWebService_Service service = new projektiket_server.TicketWebService_Service();
        projektiket_server.TicketWebService port = service.getTicketWebServicePort();
        return port.pesanParkir(nomorParkir, tanggalPembelian, tanggalParkir, lantai, username, tempatt);
    }

    private static String cekUsername(java.lang.String username, java.lang.String password, java.lang.String nama) {
        projektiket_server.TicketWebService_Service service = new projektiket_server.TicketWebService_Service();
        projektiket_server.TicketWebService port = service.getTicketWebServicePort();
        return port.cekUsername(username, password, nama);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
